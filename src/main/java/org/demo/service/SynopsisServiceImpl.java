/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:56 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import org.demo.entity.Synopsis;
import org.demo.repository.SynopsisRepository;
import org.demo.service.criteria.SynopsisCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

/**
 * Service implementation for Synopsis.
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@Service
public class SynopsisServiceImpl implements SynopsisService {

	@Autowired
	private SynopsisRepository synopsisRepository;

	@Override
	public Page<Synopsis> search(Pageable pageable, SynopsisCriteria criteria) {
		return synopsisRepository.findAll(new SynopsisSpecification(criteria), pageable);
	}

	@Override
	public Synopsis get(Integer bookId) {
		return synopsisRepository.findOne(bookId);
	}

	@Override
	public Boolean delete(Integer bookId) {
		if (synopsisRepository.findOne(bookId) != null) {
			synopsisRepository.delete(bookId);
			return true;
		}
		return false;
	}

	@Override
	public Synopsis create(Synopsis synopsis) {
		return synopsisRepository.save(synopsis);
	}

	@Override
	public Boolean save(Synopsis synopsis) {
		final Integer pk = synopsis.getBookId();
		if (synopsisRepository.findOne(pk) != null) {
			synopsisRepository.save(synopsis);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist(Synopsis synopsis) {
		return synopsisRepository.exists(synopsis.getBookId());
	}

	class SynopsisSpecification implements Specification<Synopsis> {

		private SynopsisCriteria criteria;

		public SynopsisSpecification(SynopsisCriteria criteria) {
			this.criteria = criteria;
		}

		@Override
		public Predicate toPredicate(Root<Synopsis> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
			final List<Predicate> predicates = new ArrayList<>();
			if (StringUtils.isNotBlank(criteria.getSynopsis())) {
				predicates.add(builder.like(builder.lower(root.get("synopsis")),
						criteria.getSynopsis().toLowerCase() + "%"));
			}
			return andTogether(predicates, builder);
		}

		private Predicate andTogether(List<Predicate> predicates, CriteriaBuilder builder) {
			return builder.and(predicates.toArray(new Predicate[0]));
		}
	}

}
