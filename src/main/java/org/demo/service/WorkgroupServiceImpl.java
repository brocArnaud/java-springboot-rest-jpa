/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:56 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.service;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import org.demo.entity.Workgroup;
import org.demo.repository.WorkgroupRepository;
import org.demo.service.criteria.WorkgroupCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

/**
 * Service implementation for Workgroup.
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@Service
public class WorkgroupServiceImpl implements WorkgroupService {

	@Autowired
	private WorkgroupRepository workgroupRepository;

	@Override
	public Page<Workgroup> search(Pageable pageable, WorkgroupCriteria criteria) {
		return workgroupRepository.findAll(new WorkgroupSpecification(criteria), pageable);
	}

	@Override
	public Workgroup get(Short id) {
		return workgroupRepository.findOne(id);
	}

	@Override
	public Boolean delete(Short id) {
		if (workgroupRepository.findOne(id) != null) {
			workgroupRepository.delete(id);
			return true;
		}
		return false;
	}

	@Override
	public Workgroup create(Workgroup workgroup) {
		return workgroupRepository.save(workgroup);
	}

	@Override
	public Boolean save(Workgroup workgroup) {
		final Short pk = workgroup.getId();
		if (workgroupRepository.findOne(pk) != null) {
			workgroupRepository.save(workgroup);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist(Workgroup workgroup) {
		return workgroupRepository.exists(workgroup.getId());
	}

	class WorkgroupSpecification implements Specification<Workgroup> {

		private WorkgroupCriteria criteria;

		public WorkgroupSpecification(WorkgroupCriteria criteria) {
			this.criteria = criteria;
		}

		@Override
		public Predicate toPredicate(Root<Workgroup> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
			final List<Predicate> predicates = new ArrayList<>();
			if (StringUtils.isNotBlank(criteria.getName())) {
				predicates.add(builder.like(builder.lower(root.get("name")),
						criteria.getName().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getDescription())) {
				predicates.add(builder.like(builder.lower(root.get("description")),
						criteria.getDescription().toLowerCase() + "%"));
			}
			return andTogether(predicates, builder);
		}

		private Predicate andTogether(List<Predicate> predicates, CriteriaBuilder builder) {
			return builder.and(predicates.toArray(new Predicate[0]));
		}
	}

}
