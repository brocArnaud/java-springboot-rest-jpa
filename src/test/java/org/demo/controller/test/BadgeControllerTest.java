/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:54 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.BadgeResource;
import org.demo.entity.Badge;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import java.util.Date;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class BadgeControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	private static final Short AUTHORIZATIONLEVEL = new Short((short)1);
	private static final Date ENDOFVALIDITY = new Date();

	@Test
	public void createBadgeTest() {
		// Create an badge
		Badge badge = createMocKBadge(new Integer((int)1) , AUTHORIZATIONLEVEL, ENDOFVALIDITY);
		// Recover this badge
		ResponseEntity<BadgeResource> result = this.restTemplate.getForEntity("/badge/1", BadgeResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/badge/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getAuthorizationLevel()).isEqualTo(AUTHORIZATIONLEVEL);
		// Try to create the same badge, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/badge", badge, BadgeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an badge and assert field
		Badge badge = createMocKBadge(new Integer((int)1)  , AUTHORIZATIONLEVEL, ENDOFVALIDITY);
		// Recover this badge
		ResponseEntity<BadgeResource> result = this.restTemplate.getForEntity("/badge/1", BadgeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/badge/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getAuthorizationLevel()).isEqualTo(AUTHORIZATIONLEVEL);

		// Change field value
		badge.setAuthorizationLevel(new Short((short) 2));
		// Process update
		RequestEntity<Badge> request = new RequestEntity<Badge>(badge, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/badge/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the badge and ensure field are correct
		result = this.restTemplate.getForEntity("/badge/1", BadgeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/badge/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getAuthorizationLevel()).isEqualTo(new Short((short) 2));
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Badge> request = new RequestEntity<Badge>(new Badge(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/badge/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an badge
		createMocKBadge(new Integer((int)1)  , AUTHORIZATIONLEVEL, ENDOFVALIDITY);
		// Recover this badge and test if all is ok
		ResponseEntity<BadgeResource> result = this.restTemplate.getForEntity("/badge/1", BadgeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the badge
		RequestEntity<Badge> request = new RequestEntity<Badge>(new Badge(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/badge/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the badge and ensure it's don't exist
		// Recover this badge and test if all is ok
		result = this.restTemplate.getForEntity("/badge/1", BadgeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the badge
		RequestEntity<Badge> request = new RequestEntity<Badge>(new Badge(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/badge/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getBadgesTest() {
		// First call assert no element
		ResponseEntity<PagedResources<BadgeResource>> result = this.search("/badge");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<BadgeResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 badge
		for (int i = 1; i < 22; i++) {
			createMocKBadge(new Integer((int)i),new Short((short) (AUTHORIZATIONLEVEL + i)), new Date());
		}
		result = this.search("/badge");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/badge?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}


	private Badge createMocKBadge(Integer badgeNumber, Short authorizationLevel, Date endOfValidity) {
		Badge badgeMock = new Badge();
		badgeMock.setBadgeNumber(badgeNumber);
		badgeMock.setAuthorizationLevel(authorizationLevel);
		badgeMock.setEndOfValidity(endOfValidity);
		this.restTemplate.postForLocation("/badge", badgeMock);
		return badgeMock;
	}

	private ResponseEntity<PagedResources<BadgeResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<BadgeResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<BadgeResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}