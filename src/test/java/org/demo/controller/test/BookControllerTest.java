/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:54 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.assertj.core.util.BigDecimalComparator;
import org.demo.controller.resource.BookResource;
import org.demo.entity.Book;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import java.math.BigDecimal;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class BookControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	private static final Integer PUBLISHERID = new Integer((int)1);
	private static final Integer AUTHORID = new Integer((int)1);
	private static final String ISBN = "isbn";
	private static final String TITLE = "title";
	private static final BigDecimal PRICE = new BigDecimal(1.0);
	private static final Integer QUANTITY = new Integer((int)1);
	private static final Integer DISCOUNT = new Integer((int)1);
	private static final Boolean AVAILABILITY = true;
	private static final Boolean BESTSELLER = true;

	@Test
	public void createBookTest() {
		// Create an book
		Book book = createMocKBook(new Integer((int)1) , PUBLISHERID, AUTHORID, ISBN, TITLE, PRICE, QUANTITY, DISCOUNT, AVAILABILITY, BESTSELLER);
		// Recover this book
		ResponseEntity<BookResource> result = this.restTemplate.getForEntity("/book/1", BookResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/book/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getPublisherId()).isEqualTo(PUBLISHERID);
		assertThat(result.getBody().getAuthorId()).isEqualTo(AUTHORID);
		assertThat(result.getBody().getIsbn()).isEqualTo(ISBN);
		assertThat(result.getBody().getTitle()).isEqualTo(TITLE);
		BigDecimalComparator comparator = new BigDecimalComparator();
		comparator.compare(result.getBody().getPrice(), PRICE);
		assertThat(true).isEqualTo(comparator.compare(result.getBody().getPrice(), PRICE) == 0);
		assertThat(result.getBody().getQuantity()).isEqualTo(QUANTITY);
		assertThat(result.getBody().getDiscount()).isEqualTo(DISCOUNT);
		assertThat(result.getBody().getAvailability()).isEqualTo(AVAILABILITY);
		assertThat(result.getBody().getBestSeller()).isEqualTo(BESTSELLER);
		// Try to create the same book, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/book", book, BookResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an book and assert field
		Book book = createMocKBook(new Integer((int)1)  , PUBLISHERID, AUTHORID, ISBN, TITLE, PRICE, QUANTITY, DISCOUNT, AVAILABILITY, BESTSELLER);
		// Recover this book
		ResponseEntity<BookResource> result = this.restTemplate.getForEntity("/book/1", BookResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/book/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getPublisherId()).isEqualTo(PUBLISHERID);
		assertThat(result.getBody().getAuthorId()).isEqualTo(AUTHORID);
		assertThat(result.getBody().getIsbn()).isEqualTo(ISBN);
		assertThat(result.getBody().getTitle()).isEqualTo(TITLE);
		BigDecimalComparator comparator = new BigDecimalComparator();
		comparator.compare(result.getBody().getPrice(), PRICE);
		assertThat(true).isEqualTo(comparator.compare(result.getBody().getPrice(), PRICE) == 0);
		assertThat(result.getBody().getQuantity()).isEqualTo(QUANTITY);
		assertThat(result.getBody().getDiscount()).isEqualTo(DISCOUNT);
		assertThat(result.getBody().getAvailability()).isEqualTo(AVAILABILITY);
		assertThat(result.getBody().getBestSeller()).isEqualTo(BESTSELLER);

		// Change field value
		book.setPublisherId(new Integer((int) 2));
		book.setAuthorId(new Integer((int) 2));
		book.setIsbn("isbn");
		book.setTitle("title");
		book.setPrice(new BigDecimal(2.0));
		book.setQuantity(new Integer((int) 2));
		book.setDiscount(new Integer((int) 2));
		book.setAvailability(false);
		book.setBestSeller(false);
		// Process update
		RequestEntity<Book> request = new RequestEntity<Book>(book, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/book/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the book and ensure field are correct
		result = this.restTemplate.getForEntity("/book/1", BookResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/book/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getPublisherId()).isEqualTo(new Integer((int) 2));
		assertThat(result.getBody().getAuthorId()).isEqualTo(new Integer((int) 2));
		assertThat(result.getBody().getIsbn()).isEqualTo("isbn");
		assertThat(result.getBody().getTitle()).isEqualTo("title");
		comparator.compare(result.getBody().getPrice(), new BigDecimal(2.0));
		assertThat(true).isEqualTo(comparator.compare(result.getBody().getPrice(), new BigDecimal(2.0)) == 0);
		assertThat(result.getBody().getQuantity()).isEqualTo(new Integer((int) 2));
		assertThat(result.getBody().getDiscount()).isEqualTo(new Integer((int) 2));
		assertThat(result.getBody().getAvailability()).isEqualTo(false);
		assertThat(result.getBody().getBestSeller()).isEqualTo(false);
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Book> request = new RequestEntity<Book>(new Book(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/book/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an book
		createMocKBook(new Integer((int)1)  , PUBLISHERID, AUTHORID, ISBN, TITLE, PRICE, QUANTITY, DISCOUNT, AVAILABILITY, BESTSELLER);
		// Recover this book and test if all is ok
		ResponseEntity<BookResource> result = this.restTemplate.getForEntity("/book/1", BookResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the book
		RequestEntity<Book> request = new RequestEntity<Book>(new Book(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/book/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the book and ensure it's don't exist
		// Recover this book and test if all is ok
		result = this.restTemplate.getForEntity("/book/1", BookResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the book
		RequestEntity<Book> request = new RequestEntity<Book>(new Book(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/book/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getBooksTest() {
		// First call assert no element
		ResponseEntity<PagedResources<BookResource>> result = this.search("/book");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<BookResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 book
		for (int i = 1; i < 22; i++) {
			createMocKBook(new Integer((int)i),PUBLISHERID + i,AUTHORID + i,String.valueOf(i),String.valueOf(i),PRICE.add(new BigDecimal(i)),QUANTITY + i,DISCOUNT + i,!AVAILABILITY,!BESTSELLER);
		}
		result = this.search("/book");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/book?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getBooksTestFilter() {
		// Create an book
		Book book = createMocKBook(new Integer((int)1) , PUBLISHERID, AUTHORID, ISBN, TITLE, PRICE, QUANTITY, DISCOUNT, AVAILABILITY, BESTSELLER);
		RequestEntity<Book> request = null;
		ResponseEntity<PagedResources<BookResource>> result = null;
		PagedResources<BookResource> page = null;
		// Test isbn filter
		// Set the value on entity and update
		book.setIsbn("c");
		// Process update
		request = new RequestEntity<Book>(book, HttpMethod.PUT, null);
		this.restTemplate.exchange("/book/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test isbn filter
		result = this.search("/book?size=20&isbn=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (BookResource bookResource : page.getContent()) {
			assertThat(bookResource.getIsbn()).startsWith("c");
		}
		// Test title filter
		// Set the value on entity and update
		book.setTitle("c");
		// Process update
		request = new RequestEntity<Book>(book, HttpMethod.PUT, null);
		this.restTemplate.exchange("/book/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test title filter
		result = this.search("/book?size=20&title=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (BookResource bookResource : page.getContent()) {
			assertThat(bookResource.getTitle()).startsWith("c");
		}
	}

	private Book createMocKBook(Integer id, Integer publisherId, Integer authorId, String isbn, String title, BigDecimal price, Integer quantity, Integer discount, Boolean availability, Boolean bestSeller) {
		Book bookMock = new Book();
		bookMock.setId(id);
		bookMock.setPublisherId(publisherId);
		bookMock.setAuthorId(authorId);
		bookMock.setIsbn(isbn);
		bookMock.setTitle(title);
		bookMock.setPrice(price);
		bookMock.setQuantity(quantity);
		bookMock.setDiscount(discount);
		bookMock.setAvailability(availability);
		bookMock.setBestSeller(bestSeller);
		this.restTemplate.postForLocation("/book", bookMock);
		return bookMock;
	}

	private ResponseEntity<PagedResources<BookResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<BookResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<BookResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}