/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:54 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.BookOrderResource;
import org.demo.entity.BookOrder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import java.util.Date;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class BookOrderControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	private static final String SHOPCODE = "1";
	private static final String CUSTOMERCODE = "1";
	private static final String EMPLOYEECODE = "1";
	private static final Date DATE = new Date();
	private static final Integer STATE = new Integer((int)1);

	@Test
	public void createBookOrderTest() {
		// Create an bookOrder
		BookOrder bookOrder = createMocKBookOrder(new Integer((int)1) , SHOPCODE, CUSTOMERCODE, EMPLOYEECODE, DATE, STATE);
		// Recover this bookOrder
		ResponseEntity<BookOrderResource> result = this.restTemplate.getForEntity("/bookOrder/1", BookOrderResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/bookOrder/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getShopCode()).isEqualTo(SHOPCODE);
		assertThat(result.getBody().getCustomerCode()).isEqualTo(CUSTOMERCODE);
		assertThat(result.getBody().getEmployeeCode()).isEqualTo(EMPLOYEECODE);
		assertThat(result.getBody().getState()).isEqualTo(STATE);
		// Try to create the same bookOrder, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/bookOrder", bookOrder, BookOrderResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an bookOrder and assert field
		BookOrder bookOrder = createMocKBookOrder(new Integer((int)1)  , SHOPCODE, CUSTOMERCODE, EMPLOYEECODE, DATE, STATE);
		// Recover this bookOrder
		ResponseEntity<BookOrderResource> result = this.restTemplate.getForEntity("/bookOrder/1", BookOrderResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/bookOrder/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getShopCode()).isEqualTo(SHOPCODE);
		assertThat(result.getBody().getCustomerCode()).isEqualTo(CUSTOMERCODE);
		assertThat(result.getBody().getEmployeeCode()).isEqualTo(EMPLOYEECODE);
		assertThat(result.getBody().getState()).isEqualTo(STATE);

		// Change field value
		bookOrder.setShopCode("2");
		bookOrder.setCustomerCode("2");
		bookOrder.setEmployeeCode("2");
		bookOrder.setState(new Integer((int) 2));
		// Process update
		RequestEntity<BookOrder> request = new RequestEntity<BookOrder>(bookOrder, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/bookOrder/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the bookOrder and ensure field are correct
		result = this.restTemplate.getForEntity("/bookOrder/1", BookOrderResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/bookOrder/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getShopCode()).isEqualTo("2");
		assertThat(result.getBody().getCustomerCode()).isEqualTo("2");
		assertThat(result.getBody().getEmployeeCode()).isEqualTo("2");
		assertThat(result.getBody().getState()).isEqualTo(new Integer((int) 2));
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<BookOrder> request = new RequestEntity<BookOrder>(new BookOrder(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/bookOrder/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an bookOrder
		createMocKBookOrder(new Integer((int)1)  , SHOPCODE, CUSTOMERCODE, EMPLOYEECODE, DATE, STATE);
		// Recover this bookOrder and test if all is ok
		ResponseEntity<BookOrderResource> result = this.restTemplate.getForEntity("/bookOrder/1", BookOrderResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the bookOrder
		RequestEntity<BookOrder> request = new RequestEntity<BookOrder>(new BookOrder(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/bookOrder/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the bookOrder and ensure it's don't exist
		// Recover this bookOrder and test if all is ok
		result = this.restTemplate.getForEntity("/bookOrder/1", BookOrderResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the bookOrder
		RequestEntity<BookOrder> request = new RequestEntity<BookOrder>(new BookOrder(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/bookOrder/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getBookOrdersTest() {
		// First call assert no element
		ResponseEntity<PagedResources<BookOrderResource>> result = this.search("/bookOrder");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<BookOrderResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 bookOrder
		for (int i = 1; i < 22; i++) {
			createMocKBookOrder(new Integer((int)i),String.valueOf(i),String.valueOf(i),String.valueOf(i), new Date(),STATE + i);
		}
		result = this.search("/bookOrder");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/bookOrder?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getBookOrdersTestFilter() {
		// Create an bookOrder
		BookOrder bookOrder = createMocKBookOrder(new Integer((int)1) , SHOPCODE, CUSTOMERCODE, EMPLOYEECODE, DATE, STATE);
		RequestEntity<BookOrder> request = null;
		ResponseEntity<PagedResources<BookOrderResource>> result = null;
		PagedResources<BookOrderResource> page = null;
		// Test shopCode filter
		// Set the value on entity and update
		bookOrder.setShopCode("c");
		// Process update
		request = new RequestEntity<BookOrder>(bookOrder, HttpMethod.PUT, null);
		this.restTemplate.exchange("/bookOrder/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test shopCode filter
		result = this.search("/bookOrder?size=20&shopCode=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (BookOrderResource bookOrderResource : page.getContent()) {
			assertThat(bookOrderResource.getShopCode()).startsWith("c");
		}
		// Test customerCode filter
		// Set the value on entity and update
		bookOrder.setCustomerCode("c");
		// Process update
		request = new RequestEntity<BookOrder>(bookOrder, HttpMethod.PUT, null);
		this.restTemplate.exchange("/bookOrder/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test customerCode filter
		result = this.search("/bookOrder?size=20&customerCode=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (BookOrderResource bookOrderResource : page.getContent()) {
			assertThat(bookOrderResource.getCustomerCode()).startsWith("c");
		}
		// Test employeeCode filter
		// Set the value on entity and update
		bookOrder.setEmployeeCode("c");
		// Process update
		request = new RequestEntity<BookOrder>(bookOrder, HttpMethod.PUT, null);
		this.restTemplate.exchange("/bookOrder/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test employeeCode filter
		result = this.search("/bookOrder?size=20&employeeCode=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (BookOrderResource bookOrderResource : page.getContent()) {
			assertThat(bookOrderResource.getEmployeeCode()).startsWith("c");
		}
	}

	private BookOrder createMocKBookOrder(Integer id, String shopCode, String customerCode, String employeeCode, Date date, Integer state) {
		BookOrder bookOrderMock = new BookOrder();
		bookOrderMock.setId(id);
		bookOrderMock.setShopCode(shopCode);
		bookOrderMock.setCustomerCode(customerCode);
		bookOrderMock.setEmployeeCode(employeeCode);
		bookOrderMock.setDate(date);
		bookOrderMock.setState(state);
		this.restTemplate.postForLocation("/bookOrder", bookOrderMock);
		return bookOrderMock;
	}

	private ResponseEntity<PagedResources<BookOrderResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<BookOrderResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<BookOrderResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}