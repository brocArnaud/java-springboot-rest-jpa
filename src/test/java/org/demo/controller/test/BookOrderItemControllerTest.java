/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:55 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.assertj.core.util.BigDecimalComparator;
import org.demo.controller.resource.BookOrderItemResource;
import org.demo.entity.BookOrderItem;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import java.math.BigDecimal;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class BookOrderItemControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	private static final Integer QUANTITY = new Integer((int)1);
	private static final BigDecimal PRICE = new BigDecimal(1.0);

	@Test
	public void createBookOrderItemTest() {
		// Create an bookOrderItem
		BookOrderItem bookOrderItem = createMocKBookOrderItem(new Integer((int)1) ,new Integer((int)1) , QUANTITY, PRICE);
		// Recover this bookOrderItem
		ResponseEntity<BookOrderItemResource> result = this.restTemplate.getForEntity("/bookOrderItem/1/1", BookOrderItemResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/bookOrderItem/1/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getQuantity()).isEqualTo(QUANTITY);
		BigDecimalComparator comparator = new BigDecimalComparator();
		comparator.compare(result.getBody().getPrice(), PRICE);
		assertThat(true).isEqualTo(comparator.compare(result.getBody().getPrice(), PRICE) == 0);
		// Try to create the same bookOrderItem, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/bookOrderItem", bookOrderItem, BookOrderItemResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an bookOrderItem and assert field
		BookOrderItem bookOrderItem = createMocKBookOrderItem(new Integer((int)1) ,new Integer((int)1)  , QUANTITY, PRICE);
		// Recover this bookOrderItem
		ResponseEntity<BookOrderItemResource> result = this.restTemplate.getForEntity("/bookOrderItem/1/1", BookOrderItemResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/bookOrderItem/1/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getQuantity()).isEqualTo(QUANTITY);
		BigDecimalComparator comparator = new BigDecimalComparator();
		comparator.compare(result.getBody().getPrice(), PRICE);
		assertThat(true).isEqualTo(comparator.compare(result.getBody().getPrice(), PRICE) == 0);

		// Change field value
		bookOrderItem.setQuantity(new Integer((int) 2));
		bookOrderItem.setPrice(new BigDecimal(2.0));
		// Process update
		RequestEntity<BookOrderItem> request = new RequestEntity<BookOrderItem>(bookOrderItem, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/bookOrderItem/1/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the bookOrderItem and ensure field are correct
		result = this.restTemplate.getForEntity("/bookOrderItem/1/1", BookOrderItemResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/bookOrderItem/1/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getQuantity()).isEqualTo(new Integer((int) 2));
		comparator.compare(result.getBody().getPrice(), new BigDecimal(2.0));
		assertThat(true).isEqualTo(comparator.compare(result.getBody().getPrice(), new BigDecimal(2.0)) == 0);
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<BookOrderItem> request = new RequestEntity<BookOrderItem>(new BookOrderItem(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/bookOrderItem/999/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an bookOrderItem
		createMocKBookOrderItem(new Integer((int)1) ,new Integer((int)1)  , QUANTITY, PRICE);
		// Recover this bookOrderItem and test if all is ok
		ResponseEntity<BookOrderItemResource> result = this.restTemplate.getForEntity("/bookOrderItem/1/1", BookOrderItemResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the bookOrderItem
		RequestEntity<BookOrderItem> request = new RequestEntity<BookOrderItem>(new BookOrderItem(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/bookOrderItem/1/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the bookOrderItem and ensure it's don't exist
		// Recover this bookOrderItem and test if all is ok
		result = this.restTemplate.getForEntity("/bookOrderItem/1/1", BookOrderItemResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the bookOrderItem
		RequestEntity<BookOrderItem> request = new RequestEntity<BookOrderItem>(new BookOrderItem(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/bookOrderItem/999/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getBookOrderItemsTest() {
		// First call assert no element
		ResponseEntity<PagedResources<BookOrderItemResource>> result = this.search("/bookOrderItem");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<BookOrderItemResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 bookOrderItem
		for (int i = 1; i < 22; i++) {
			createMocKBookOrderItem(new Integer((int)i), new Integer((int)i),QUANTITY + i,PRICE.add(new BigDecimal(i)));
		}
		result = this.search("/bookOrderItem");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/bookOrderItem?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}


	private BookOrderItem createMocKBookOrderItem(Integer bookOrderId,Integer bookId, Integer quantity, BigDecimal price) {
		BookOrderItem bookOrderItemMock = new BookOrderItem();
		bookOrderItemMock.setBookOrderId(bookOrderId);
		bookOrderItemMock.setBookId(bookId);
		bookOrderItemMock.setQuantity(quantity);
		bookOrderItemMock.setPrice(price);
		this.restTemplate.postForLocation("/bookOrderItem", bookOrderItemMock);
		return bookOrderItemMock;
	}

	private ResponseEntity<PagedResources<BookOrderItemResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<BookOrderItemResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<BookOrderItemResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}