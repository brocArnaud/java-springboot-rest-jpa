/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:55 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.CustomerResource;
import org.demo.entity.Customer;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class CustomerControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	private static final String COUNTRYCODE = "1";
	private static final String FIRSTNAME = "firstName";
	private static final String LASTNAME = "lastName";
	private static final String LOGIN = "login";
	private static final String PASSWORD = "password";
	private static final Integer AGE = new Integer((int)1);
	private static final String CITY = "city";
	private static final Integer ZIPCODE = new Integer((int)1);
	private static final String PHONE = "phone";
	private static final Boolean REVIEWER = true;

	@Test
	public void createCustomerTest() {
		// Create an customer
		Customer customer = createMocKCustomer("1" , COUNTRYCODE, FIRSTNAME, LASTNAME, LOGIN, PASSWORD, AGE, CITY, ZIPCODE, PHONE, REVIEWER);
		// Recover this customer
		ResponseEntity<CustomerResource> result = this.restTemplate.getForEntity("/customer/1", CustomerResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/customer/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getCountryCode()).isEqualTo(COUNTRYCODE);
		assertThat(result.getBody().getFirstName()).isEqualTo(FIRSTNAME);
		assertThat(result.getBody().getLastName()).isEqualTo(LASTNAME);
		assertThat(result.getBody().getLogin()).isEqualTo(LOGIN);
		assertThat(result.getBody().getPassword()).isEqualTo(PASSWORD);
		assertThat(result.getBody().getAge()).isEqualTo(AGE);
		assertThat(result.getBody().getCity()).isEqualTo(CITY);
		assertThat(result.getBody().getZipCode()).isEqualTo(ZIPCODE);
		assertThat(result.getBody().getPhone()).isEqualTo(PHONE);
		assertThat(result.getBody().getReviewer()).isEqualTo(REVIEWER);
		// Try to create the same customer, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/customer", customer, CustomerResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an customer and assert field
		Customer customer = createMocKCustomer("1"  , COUNTRYCODE, FIRSTNAME, LASTNAME, LOGIN, PASSWORD, AGE, CITY, ZIPCODE, PHONE, REVIEWER);
		// Recover this customer
		ResponseEntity<CustomerResource> result = this.restTemplate.getForEntity("/customer/1", CustomerResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/customer/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getCountryCode()).isEqualTo(COUNTRYCODE);
		assertThat(result.getBody().getFirstName()).isEqualTo(FIRSTNAME);
		assertThat(result.getBody().getLastName()).isEqualTo(LASTNAME);
		assertThat(result.getBody().getLogin()).isEqualTo(LOGIN);
		assertThat(result.getBody().getPassword()).isEqualTo(PASSWORD);
		assertThat(result.getBody().getAge()).isEqualTo(AGE);
		assertThat(result.getBody().getCity()).isEqualTo(CITY);
		assertThat(result.getBody().getZipCode()).isEqualTo(ZIPCODE);
		assertThat(result.getBody().getPhone()).isEqualTo(PHONE);
		assertThat(result.getBody().getReviewer()).isEqualTo(REVIEWER);

		// Change field value
		customer.setCountryCode("2");
		customer.setFirstName("firstName");
		customer.setLastName("lastName");
		customer.setLogin("login");
		customer.setPassword("password");
		customer.setAge(new Integer((int) 2));
		customer.setCity("city");
		customer.setZipCode(new Integer((int) 2));
		customer.setPhone("phone");
		customer.setReviewer(false);
		// Process update
		RequestEntity<Customer> request = new RequestEntity<Customer>(customer, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/customer/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the customer and ensure field are correct
		result = this.restTemplate.getForEntity("/customer/1", CustomerResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/customer/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getCountryCode()).isEqualTo("2");
		assertThat(result.getBody().getFirstName()).isEqualTo("firstName");
		assertThat(result.getBody().getLastName()).isEqualTo("lastName");
		assertThat(result.getBody().getLogin()).isEqualTo("login");
		assertThat(result.getBody().getPassword()).isEqualTo("password");
		assertThat(result.getBody().getAge()).isEqualTo(new Integer((int) 2));
		assertThat(result.getBody().getCity()).isEqualTo("city");
		assertThat(result.getBody().getZipCode()).isEqualTo(new Integer((int) 2));
		assertThat(result.getBody().getPhone()).isEqualTo("phone");
		assertThat(result.getBody().getReviewer()).isEqualTo(false);
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Customer> request = new RequestEntity<Customer>(new Customer(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/customer/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an customer
		createMocKCustomer("1"  , COUNTRYCODE, FIRSTNAME, LASTNAME, LOGIN, PASSWORD, AGE, CITY, ZIPCODE, PHONE, REVIEWER);
		// Recover this customer and test if all is ok
		ResponseEntity<CustomerResource> result = this.restTemplate.getForEntity("/customer/1", CustomerResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the customer
		RequestEntity<Customer> request = new RequestEntity<Customer>(new Customer(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/customer/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the customer and ensure it's don't exist
		// Recover this customer and test if all is ok
		result = this.restTemplate.getForEntity("/customer/1", CustomerResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the customer
		RequestEntity<Customer> request = new RequestEntity<Customer>(new Customer(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/customer/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getCustomersTest() {
		// First call assert no element
		ResponseEntity<PagedResources<CustomerResource>> result = this.search("/customer");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<CustomerResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 customer
		for (int i = 1; i < 22; i++) {
			createMocKCustomer(String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),AGE + i,String.valueOf(i),ZIPCODE + i,String.valueOf(i),!REVIEWER);
		}
		result = this.search("/customer");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/customer?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getCustomersTestFilter() {
		// Create an customer
		Customer customer = createMocKCustomer("1" , COUNTRYCODE, FIRSTNAME, LASTNAME, LOGIN, PASSWORD, AGE, CITY, ZIPCODE, PHONE, REVIEWER);
		RequestEntity<Customer> request = null;
		ResponseEntity<PagedResources<CustomerResource>> result = null;
		PagedResources<CustomerResource> page = null;
		// Test countryCode filter
		// Set the value on entity and update
		customer.setCountryCode("c");
		// Process update
		request = new RequestEntity<Customer>(customer, HttpMethod.PUT, null);
		this.restTemplate.exchange("/customer/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test countryCode filter
		result = this.search("/customer?size=20&countryCode=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (CustomerResource customerResource : page.getContent()) {
			assertThat(customerResource.getCountryCode()).startsWith("c");
		}
		// Test firstName filter
		// Set the value on entity and update
		customer.setFirstName("c");
		// Process update
		request = new RequestEntity<Customer>(customer, HttpMethod.PUT, null);
		this.restTemplate.exchange("/customer/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test firstName filter
		result = this.search("/customer?size=20&firstName=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (CustomerResource customerResource : page.getContent()) {
			assertThat(customerResource.getFirstName()).startsWith("c");
		}
		// Test lastName filter
		// Set the value on entity and update
		customer.setLastName("c");
		// Process update
		request = new RequestEntity<Customer>(customer, HttpMethod.PUT, null);
		this.restTemplate.exchange("/customer/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test lastName filter
		result = this.search("/customer?size=20&lastName=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (CustomerResource customerResource : page.getContent()) {
			assertThat(customerResource.getLastName()).startsWith("c");
		}
		// Test login filter
		// Set the value on entity and update
		customer.setLogin("c");
		// Process update
		request = new RequestEntity<Customer>(customer, HttpMethod.PUT, null);
		this.restTemplate.exchange("/customer/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test login filter
		result = this.search("/customer?size=20&login=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (CustomerResource customerResource : page.getContent()) {
			assertThat(customerResource.getLogin()).startsWith("c");
		}
		// Test password filter
		// Set the value on entity and update
		customer.setPassword("c");
		// Process update
		request = new RequestEntity<Customer>(customer, HttpMethod.PUT, null);
		this.restTemplate.exchange("/customer/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test password filter
		result = this.search("/customer?size=20&password=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (CustomerResource customerResource : page.getContent()) {
			assertThat(customerResource.getPassword()).startsWith("c");
		}
		// Test city filter
		// Set the value on entity and update
		customer.setCity("c");
		// Process update
		request = new RequestEntity<Customer>(customer, HttpMethod.PUT, null);
		this.restTemplate.exchange("/customer/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test city filter
		result = this.search("/customer?size=20&city=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (CustomerResource customerResource : page.getContent()) {
			assertThat(customerResource.getCity()).startsWith("c");
		}
		// Test phone filter
		// Set the value on entity and update
		customer.setPhone("c");
		// Process update
		request = new RequestEntity<Customer>(customer, HttpMethod.PUT, null);
		this.restTemplate.exchange("/customer/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test phone filter
		result = this.search("/customer?size=20&phone=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (CustomerResource customerResource : page.getContent()) {
			assertThat(customerResource.getPhone()).startsWith("c");
		}
	}

	private Customer createMocKCustomer(String code, String countryCode, String firstName, String lastName, String login, String password, Integer age, String city, Integer zipCode, String phone, Boolean reviewer) {
		Customer customerMock = new Customer();
		customerMock.setCode(code);
		customerMock.setCountryCode(countryCode);
		customerMock.setFirstName(firstName);
		customerMock.setLastName(lastName);
		customerMock.setLogin(login);
		customerMock.setPassword(password);
		customerMock.setAge(age);
		customerMock.setCity(city);
		customerMock.setZipCode(zipCode);
		customerMock.setPhone(phone);
		customerMock.setReviewer(reviewer);
		this.restTemplate.postForLocation("/customer", customerMock);
		return customerMock;
	}

	private ResponseEntity<PagedResources<CustomerResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<CustomerResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<CustomerResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}