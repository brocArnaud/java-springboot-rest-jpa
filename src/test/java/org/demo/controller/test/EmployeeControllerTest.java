/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:55 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.EmployeeResource;
import org.demo.entity.Employee;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class EmployeeControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	private static final String SHOPCODE = "1";
	private static final String FIRSTNAME = "firstName";
	private static final String LASTNAME = "lastName";
	private static final Boolean MANAGER = true;
	private static final Integer BADGENUMBER = new Integer((int)1);
	private static final String EMAIL = "email";

	@Test
	public void createEmployeeTest() {
		// Create an employee
		Employee employee = createMocKEmployee("1" , SHOPCODE, FIRSTNAME, LASTNAME, MANAGER, BADGENUMBER, EMAIL);
		// Recover this employee
		ResponseEntity<EmployeeResource> result = this.restTemplate.getForEntity("/employee/1", EmployeeResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/employee/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getShopCode()).isEqualTo(SHOPCODE);
		assertThat(result.getBody().getFirstName()).isEqualTo(FIRSTNAME);
		assertThat(result.getBody().getLastName()).isEqualTo(LASTNAME);
		assertThat(result.getBody().getManager()).isEqualTo(MANAGER);
		assertThat(result.getBody().getBadgeNumber()).isEqualTo(BADGENUMBER);
		assertThat(result.getBody().getEmail()).isEqualTo(EMAIL);
		// Try to create the same employee, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/employee", employee, EmployeeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an employee and assert field
		Employee employee = createMocKEmployee("1"  , SHOPCODE, FIRSTNAME, LASTNAME, MANAGER, BADGENUMBER, EMAIL);
		// Recover this employee
		ResponseEntity<EmployeeResource> result = this.restTemplate.getForEntity("/employee/1", EmployeeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/employee/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getShopCode()).isEqualTo(SHOPCODE);
		assertThat(result.getBody().getFirstName()).isEqualTo(FIRSTNAME);
		assertThat(result.getBody().getLastName()).isEqualTo(LASTNAME);
		assertThat(result.getBody().getManager()).isEqualTo(MANAGER);
		assertThat(result.getBody().getBadgeNumber()).isEqualTo(BADGENUMBER);
		assertThat(result.getBody().getEmail()).isEqualTo(EMAIL);

		// Change field value
		employee.setShopCode("2");
		employee.setFirstName("firstName");
		employee.setLastName("lastName");
		employee.setManager(false);
		employee.setBadgeNumber(new Integer((int) 2));
		employee.setEmail("email");
		// Process update
		RequestEntity<Employee> request = new RequestEntity<Employee>(employee, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/employee/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the employee and ensure field are correct
		result = this.restTemplate.getForEntity("/employee/1", EmployeeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/employee/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getShopCode()).isEqualTo("2");
		assertThat(result.getBody().getFirstName()).isEqualTo("firstName");
		assertThat(result.getBody().getLastName()).isEqualTo("lastName");
		assertThat(result.getBody().getManager()).isEqualTo(false);
		assertThat(result.getBody().getBadgeNumber()).isEqualTo(new Integer((int) 2));
		assertThat(result.getBody().getEmail()).isEqualTo("email");
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Employee> request = new RequestEntity<Employee>(new Employee(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/employee/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an employee
		createMocKEmployee("1"  , SHOPCODE, FIRSTNAME, LASTNAME, MANAGER, BADGENUMBER, EMAIL);
		// Recover this employee and test if all is ok
		ResponseEntity<EmployeeResource> result = this.restTemplate.getForEntity("/employee/1", EmployeeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the employee
		RequestEntity<Employee> request = new RequestEntity<Employee>(new Employee(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/employee/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the employee and ensure it's don't exist
		// Recover this employee and test if all is ok
		result = this.restTemplate.getForEntity("/employee/1", EmployeeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the employee
		RequestEntity<Employee> request = new RequestEntity<Employee>(new Employee(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/employee/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getEmployeesTest() {
		// First call assert no element
		ResponseEntity<PagedResources<EmployeeResource>> result = this.search("/employee");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<EmployeeResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 employee
		for (int i = 1; i < 22; i++) {
			createMocKEmployee(String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),!MANAGER,BADGENUMBER + i,String.valueOf(i));
		}
		result = this.search("/employee");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/employee?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getEmployeesTestFilter() {
		// Create an employee
		Employee employee = createMocKEmployee("1" , SHOPCODE, FIRSTNAME, LASTNAME, MANAGER, BADGENUMBER, EMAIL);
		RequestEntity<Employee> request = null;
		ResponseEntity<PagedResources<EmployeeResource>> result = null;
		PagedResources<EmployeeResource> page = null;
		// Test shopCode filter
		// Set the value on entity and update
		employee.setShopCode("c");
		// Process update
		request = new RequestEntity<Employee>(employee, HttpMethod.PUT, null);
		this.restTemplate.exchange("/employee/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test shopCode filter
		result = this.search("/employee?size=20&shopCode=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (EmployeeResource employeeResource : page.getContent()) {
			assertThat(employeeResource.getShopCode()).startsWith("c");
		}
		// Test firstName filter
		// Set the value on entity and update
		employee.setFirstName("c");
		// Process update
		request = new RequestEntity<Employee>(employee, HttpMethod.PUT, null);
		this.restTemplate.exchange("/employee/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test firstName filter
		result = this.search("/employee?size=20&firstName=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (EmployeeResource employeeResource : page.getContent()) {
			assertThat(employeeResource.getFirstName()).startsWith("c");
		}
		// Test lastName filter
		// Set the value on entity and update
		employee.setLastName("c");
		// Process update
		request = new RequestEntity<Employee>(employee, HttpMethod.PUT, null);
		this.restTemplate.exchange("/employee/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test lastName filter
		result = this.search("/employee?size=20&lastName=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (EmployeeResource employeeResource : page.getContent()) {
			assertThat(employeeResource.getLastName()).startsWith("c");
		}
		// Test email filter
		// Set the value on entity and update
		employee.setEmail("c");
		// Process update
		request = new RequestEntity<Employee>(employee, HttpMethod.PUT, null);
		this.restTemplate.exchange("/employee/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test email filter
		result = this.search("/employee?size=20&email=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (EmployeeResource employeeResource : page.getContent()) {
			assertThat(employeeResource.getEmail()).startsWith("c");
		}
	}

	private Employee createMocKEmployee(String code, String shopCode, String firstName, String lastName, Boolean manager, Integer badgeNumber, String email) {
		Employee employeeMock = new Employee();
		employeeMock.setCode(code);
		employeeMock.setShopCode(shopCode);
		employeeMock.setFirstName(firstName);
		employeeMock.setLastName(lastName);
		employeeMock.setManager(manager);
		employeeMock.setBadgeNumber(badgeNumber);
		employeeMock.setEmail(email);
		this.restTemplate.postForLocation("/employee", employeeMock);
		return employeeMock;
	}

	private ResponseEntity<PagedResources<EmployeeResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<EmployeeResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<EmployeeResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}