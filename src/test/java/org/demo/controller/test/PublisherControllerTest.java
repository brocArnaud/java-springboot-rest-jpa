/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:55 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.PublisherResource;
import org.demo.entity.Publisher;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class PublisherControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	private static final String COUNTRYCODE = "1";
	private static final String NAME = "name";
	private static final String EMAIL = "email";
	private static final String CONTACT = "contact";
	private static final String CITY = "city";
	private static final Integer ZIPCODE = new Integer((int)1);
	private static final String PHONE = "phone";

	@Test
	public void createPublisherTest() {
		// Create an publisher
		Publisher publisher = createMocKPublisher(new Integer((int)1) , COUNTRYCODE, NAME, EMAIL, CONTACT, CITY, ZIPCODE, PHONE);
		// Recover this publisher
		ResponseEntity<PublisherResource> result = this.restTemplate.getForEntity("/publisher/1", PublisherResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/publisher/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getCountryCode()).isEqualTo(COUNTRYCODE);
		assertThat(result.getBody().getName()).isEqualTo(NAME);
		assertThat(result.getBody().getEmail()).isEqualTo(EMAIL);
		assertThat(result.getBody().getContact()).isEqualTo(CONTACT);
		assertThat(result.getBody().getCity()).isEqualTo(CITY);
		assertThat(result.getBody().getZipCode()).isEqualTo(ZIPCODE);
		assertThat(result.getBody().getPhone()).isEqualTo(PHONE);
		// Try to create the same publisher, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/publisher", publisher, PublisherResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an publisher and assert field
		Publisher publisher = createMocKPublisher(new Integer((int)1)  , COUNTRYCODE, NAME, EMAIL, CONTACT, CITY, ZIPCODE, PHONE);
		// Recover this publisher
		ResponseEntity<PublisherResource> result = this.restTemplate.getForEntity("/publisher/1", PublisherResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/publisher/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getCountryCode()).isEqualTo(COUNTRYCODE);
		assertThat(result.getBody().getName()).isEqualTo(NAME);
		assertThat(result.getBody().getEmail()).isEqualTo(EMAIL);
		assertThat(result.getBody().getContact()).isEqualTo(CONTACT);
		assertThat(result.getBody().getCity()).isEqualTo(CITY);
		assertThat(result.getBody().getZipCode()).isEqualTo(ZIPCODE);
		assertThat(result.getBody().getPhone()).isEqualTo(PHONE);

		// Change field value
		publisher.setCountryCode("2");
		publisher.setName("name");
		publisher.setEmail("email");
		publisher.setContact("contact");
		publisher.setCity("city");
		publisher.setZipCode(new Integer((int) 2));
		publisher.setPhone("phone");
		// Process update
		RequestEntity<Publisher> request = new RequestEntity<Publisher>(publisher, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/publisher/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the publisher and ensure field are correct
		result = this.restTemplate.getForEntity("/publisher/1", PublisherResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/publisher/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getCountryCode()).isEqualTo("2");
		assertThat(result.getBody().getName()).isEqualTo("name");
		assertThat(result.getBody().getEmail()).isEqualTo("email");
		assertThat(result.getBody().getContact()).isEqualTo("contact");
		assertThat(result.getBody().getCity()).isEqualTo("city");
		assertThat(result.getBody().getZipCode()).isEqualTo(new Integer((int) 2));
		assertThat(result.getBody().getPhone()).isEqualTo("phone");
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Publisher> request = new RequestEntity<Publisher>(new Publisher(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/publisher/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an publisher
		createMocKPublisher(new Integer((int)1)  , COUNTRYCODE, NAME, EMAIL, CONTACT, CITY, ZIPCODE, PHONE);
		// Recover this publisher and test if all is ok
		ResponseEntity<PublisherResource> result = this.restTemplate.getForEntity("/publisher/1", PublisherResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the publisher
		RequestEntity<Publisher> request = new RequestEntity<Publisher>(new Publisher(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/publisher/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the publisher and ensure it's don't exist
		// Recover this publisher and test if all is ok
		result = this.restTemplate.getForEntity("/publisher/1", PublisherResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the publisher
		RequestEntity<Publisher> request = new RequestEntity<Publisher>(new Publisher(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/publisher/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getPublishersTest() {
		// First call assert no element
		ResponseEntity<PagedResources<PublisherResource>> result = this.search("/publisher");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<PublisherResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 publisher
		for (int i = 1; i < 22; i++) {
			createMocKPublisher(new Integer((int)i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),ZIPCODE + i,String.valueOf(i));
		}
		result = this.search("/publisher");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/publisher?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getPublishersTestFilter() {
		// Create an publisher
		Publisher publisher = createMocKPublisher(new Integer((int)1) , COUNTRYCODE, NAME, EMAIL, CONTACT, CITY, ZIPCODE, PHONE);
		RequestEntity<Publisher> request = null;
		ResponseEntity<PagedResources<PublisherResource>> result = null;
		PagedResources<PublisherResource> page = null;
		// Test countryCode filter
		// Set the value on entity and update
		publisher.setCountryCode("c");
		// Process update
		request = new RequestEntity<Publisher>(publisher, HttpMethod.PUT, null);
		this.restTemplate.exchange("/publisher/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test countryCode filter
		result = this.search("/publisher?size=20&countryCode=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (PublisherResource publisherResource : page.getContent()) {
			assertThat(publisherResource.getCountryCode()).startsWith("c");
		}
		// Test name filter
		// Set the value on entity and update
		publisher.setName("c");
		// Process update
		request = new RequestEntity<Publisher>(publisher, HttpMethod.PUT, null);
		this.restTemplate.exchange("/publisher/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test name filter
		result = this.search("/publisher?size=20&name=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (PublisherResource publisherResource : page.getContent()) {
			assertThat(publisherResource.getName()).startsWith("c");
		}
		// Test email filter
		// Set the value on entity and update
		publisher.setEmail("c");
		// Process update
		request = new RequestEntity<Publisher>(publisher, HttpMethod.PUT, null);
		this.restTemplate.exchange("/publisher/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test email filter
		result = this.search("/publisher?size=20&email=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (PublisherResource publisherResource : page.getContent()) {
			assertThat(publisherResource.getEmail()).startsWith("c");
		}
		// Test contact filter
		// Set the value on entity and update
		publisher.setContact("c");
		// Process update
		request = new RequestEntity<Publisher>(publisher, HttpMethod.PUT, null);
		this.restTemplate.exchange("/publisher/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test contact filter
		result = this.search("/publisher?size=20&contact=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (PublisherResource publisherResource : page.getContent()) {
			assertThat(publisherResource.getContact()).startsWith("c");
		}
		// Test city filter
		// Set the value on entity and update
		publisher.setCity("c");
		// Process update
		request = new RequestEntity<Publisher>(publisher, HttpMethod.PUT, null);
		this.restTemplate.exchange("/publisher/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test city filter
		result = this.search("/publisher?size=20&city=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (PublisherResource publisherResource : page.getContent()) {
			assertThat(publisherResource.getCity()).startsWith("c");
		}
		// Test phone filter
		// Set the value on entity and update
		publisher.setPhone("c");
		// Process update
		request = new RequestEntity<Publisher>(publisher, HttpMethod.PUT, null);
		this.restTemplate.exchange("/publisher/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test phone filter
		result = this.search("/publisher?size=20&phone=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (PublisherResource publisherResource : page.getContent()) {
			assertThat(publisherResource.getPhone()).startsWith("c");
		}
	}

	private Publisher createMocKPublisher(Integer code, String countryCode, String name, String email, String contact, String city, Integer zipCode, String phone) {
		Publisher publisherMock = new Publisher();
		publisherMock.setCode(code);
		publisherMock.setCountryCode(countryCode);
		publisherMock.setName(name);
		publisherMock.setEmail(email);
		publisherMock.setContact(contact);
		publisherMock.setCity(city);
		publisherMock.setZipCode(zipCode);
		publisherMock.setPhone(phone);
		this.restTemplate.postForLocation("/publisher", publisherMock);
		return publisherMock;
	}

	private ResponseEntity<PagedResources<PublisherResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<PublisherResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<PublisherResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}