/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:56 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.ReviewResource;
import org.demo.entity.Review;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import java.util.Date;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class ReviewControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	private static final String REVIEWTEXT = "reviewText";
	private static final Integer REVIEWNOTE = new Integer((int)1);
	private static final Date CREATION = new Date();
	private static final Date LASTUPDATE = new Date();

	@Test
	public void createReviewTest() {
		// Create an review
		Review review = createMocKReview("1" ,new Integer((int)1) , REVIEWTEXT, REVIEWNOTE, CREATION, LASTUPDATE);
		// Recover this review
		ResponseEntity<ReviewResource> result = this.restTemplate.getForEntity("/review/1/1", ReviewResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/review/1/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getReviewText()).isEqualTo(REVIEWTEXT);
		assertThat(result.getBody().getReviewNote()).isEqualTo(REVIEWNOTE);
		// Try to create the same review, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/review", review, ReviewResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an review and assert field
		Review review = createMocKReview("1" ,new Integer((int)1)  , REVIEWTEXT, REVIEWNOTE, CREATION, LASTUPDATE);
		// Recover this review
		ResponseEntity<ReviewResource> result = this.restTemplate.getForEntity("/review/1/1", ReviewResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/review/1/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getReviewText()).isEqualTo(REVIEWTEXT);
		assertThat(result.getBody().getReviewNote()).isEqualTo(REVIEWNOTE);

		// Change field value
		review.setReviewText("reviewText");
		review.setReviewNote(new Integer((int) 2));
		// Process update
		RequestEntity<Review> request = new RequestEntity<Review>(review, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/review/1/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the review and ensure field are correct
		result = this.restTemplate.getForEntity("/review/1/1", ReviewResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/review/1/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getReviewText()).isEqualTo("reviewText");
		assertThat(result.getBody().getReviewNote()).isEqualTo(new Integer((int) 2));
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Review> request = new RequestEntity<Review>(new Review(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/review/999/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an review
		createMocKReview("1" ,new Integer((int)1)  , REVIEWTEXT, REVIEWNOTE, CREATION, LASTUPDATE);
		// Recover this review and test if all is ok
		ResponseEntity<ReviewResource> result = this.restTemplate.getForEntity("/review/1/1", ReviewResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the review
		RequestEntity<Review> request = new RequestEntity<Review>(new Review(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/review/1/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the review and ensure it's don't exist
		// Recover this review and test if all is ok
		result = this.restTemplate.getForEntity("/review/1/1", ReviewResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the review
		RequestEntity<Review> request = new RequestEntity<Review>(new Review(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/review/999/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getReviewsTest() {
		// First call assert no element
		ResponseEntity<PagedResources<ReviewResource>> result = this.search("/review");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<ReviewResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 review
		for (int i = 1; i < 22; i++) {
			createMocKReview(String.valueOf(i), new Integer((int)i),String.valueOf(i),REVIEWNOTE + i, new Date(), new Date());
		}
		result = this.search("/review");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/review?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getReviewsTestFilter() {
		// Create an review
		Review review = createMocKReview("1" ,new Integer((int)1) , REVIEWTEXT, REVIEWNOTE, CREATION, LASTUPDATE);
		RequestEntity<Review> request = null;
		ResponseEntity<PagedResources<ReviewResource>> result = null;
		PagedResources<ReviewResource> page = null;
		// Test reviewText filter
		// Set the value on entity and update
		review.setReviewText("c");
		// Process update
		request = new RequestEntity<Review>(review, HttpMethod.PUT, null);
		this.restTemplate.exchange("/review/1/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test reviewText filter
		result = this.search("/review?size=20&reviewText=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ReviewResource reviewResource : page.getContent()) {
			assertThat(reviewResource.getReviewText()).startsWith("c");
		}
	}

	private Review createMocKReview(String customerCode,Integer bookId, String reviewText, Integer reviewNote, Date creation, Date lastUpdate) {
		Review reviewMock = new Review();
		reviewMock.setCustomerCode(customerCode);
		reviewMock.setBookId(bookId);
		reviewMock.setReviewText(reviewText);
		reviewMock.setReviewNote(reviewNote);
		reviewMock.setCreation(creation);
		reviewMock.setLastUpdate(lastUpdate);
		this.restTemplate.postForLocation("/review", reviewMock);
		return reviewMock;
	}

	private ResponseEntity<PagedResources<ReviewResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<ReviewResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<ReviewResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}