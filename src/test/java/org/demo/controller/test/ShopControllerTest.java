/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:56 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.ShopResource;
import org.demo.entity.Shop;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class ShopControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	private static final String NAME = "name";
	private static final String ADDRESS1 = "address1";
	private static final String ADDRESS2 = "address2";
	private static final Integer ZIPCODE = new Integer((int)1);
	private static final String CITY = "city";
	private static final String COUNTRYCODE = "1";
	private static final String PHONE = "phone";
	private static final String EMAIL = "email";
	private static final String EXECUTIVE = "1";

	@Test
	public void createShopTest() {
		// Create an shop
		Shop shop = createMocKShop("1" , NAME, ADDRESS1, ADDRESS2, ZIPCODE, CITY, COUNTRYCODE, PHONE, EMAIL, EXECUTIVE);
		// Recover this shop
		ResponseEntity<ShopResource> result = this.restTemplate.getForEntity("/shop/1", ShopResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/shop/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getName()).isEqualTo(NAME);
		assertThat(result.getBody().getAddress1()).isEqualTo(ADDRESS1);
		assertThat(result.getBody().getAddress2()).isEqualTo(ADDRESS2);
		assertThat(result.getBody().getZipCode()).isEqualTo(ZIPCODE);
		assertThat(result.getBody().getCity()).isEqualTo(CITY);
		assertThat(result.getBody().getCountryCode()).isEqualTo(COUNTRYCODE);
		assertThat(result.getBody().getPhone()).isEqualTo(PHONE);
		assertThat(result.getBody().getEmail()).isEqualTo(EMAIL);
		assertThat(result.getBody().getExecutive()).isEqualTo(EXECUTIVE);
		// Try to create the same shop, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/shop", shop, ShopResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an shop and assert field
		Shop shop = createMocKShop("1"  , NAME, ADDRESS1, ADDRESS2, ZIPCODE, CITY, COUNTRYCODE, PHONE, EMAIL, EXECUTIVE);
		// Recover this shop
		ResponseEntity<ShopResource> result = this.restTemplate.getForEntity("/shop/1", ShopResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/shop/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getName()).isEqualTo(NAME);
		assertThat(result.getBody().getAddress1()).isEqualTo(ADDRESS1);
		assertThat(result.getBody().getAddress2()).isEqualTo(ADDRESS2);
		assertThat(result.getBody().getZipCode()).isEqualTo(ZIPCODE);
		assertThat(result.getBody().getCity()).isEqualTo(CITY);
		assertThat(result.getBody().getCountryCode()).isEqualTo(COUNTRYCODE);
		assertThat(result.getBody().getPhone()).isEqualTo(PHONE);
		assertThat(result.getBody().getEmail()).isEqualTo(EMAIL);
		assertThat(result.getBody().getExecutive()).isEqualTo(EXECUTIVE);

		// Change field value
		shop.setName("name");
		shop.setAddress1("address1");
		shop.setAddress2("address2");
		shop.setZipCode(new Integer((int) 2));
		shop.setCity("city");
		shop.setCountryCode("2");
		shop.setPhone("phone");
		shop.setEmail("email");
		shop.setExecutive("2");
		// Process update
		RequestEntity<Shop> request = new RequestEntity<Shop>(shop, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/shop/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the shop and ensure field are correct
		result = this.restTemplate.getForEntity("/shop/1", ShopResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/shop/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getName()).isEqualTo("name");
		assertThat(result.getBody().getAddress1()).isEqualTo("address1");
		assertThat(result.getBody().getAddress2()).isEqualTo("address2");
		assertThat(result.getBody().getZipCode()).isEqualTo(new Integer((int) 2));
		assertThat(result.getBody().getCity()).isEqualTo("city");
		assertThat(result.getBody().getCountryCode()).isEqualTo("2");
		assertThat(result.getBody().getPhone()).isEqualTo("phone");
		assertThat(result.getBody().getEmail()).isEqualTo("email");
		assertThat(result.getBody().getExecutive()).isEqualTo("2");
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Shop> request = new RequestEntity<Shop>(new Shop(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/shop/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an shop
		createMocKShop("1"  , NAME, ADDRESS1, ADDRESS2, ZIPCODE, CITY, COUNTRYCODE, PHONE, EMAIL, EXECUTIVE);
		// Recover this shop and test if all is ok
		ResponseEntity<ShopResource> result = this.restTemplate.getForEntity("/shop/1", ShopResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the shop
		RequestEntity<Shop> request = new RequestEntity<Shop>(new Shop(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/shop/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the shop and ensure it's don't exist
		// Recover this shop and test if all is ok
		result = this.restTemplate.getForEntity("/shop/1", ShopResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the shop
		RequestEntity<Shop> request = new RequestEntity<Shop>(new Shop(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/shop/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getShopsTest() {
		// First call assert no element
		ResponseEntity<PagedResources<ShopResource>> result = this.search("/shop");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<ShopResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 shop
		for (int i = 1; i < 22; i++) {
			createMocKShop(String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),ZIPCODE + i,String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i));
		}
		result = this.search("/shop");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/shop?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getShopsTestFilter() {
		// Create an shop
		Shop shop = createMocKShop("1" , NAME, ADDRESS1, ADDRESS2, ZIPCODE, CITY, COUNTRYCODE, PHONE, EMAIL, EXECUTIVE);
		RequestEntity<Shop> request = null;
		ResponseEntity<PagedResources<ShopResource>> result = null;
		PagedResources<ShopResource> page = null;
		// Test name filter
		// Set the value on entity and update
		shop.setName("c");
		// Process update
		request = new RequestEntity<Shop>(shop, HttpMethod.PUT, null);
		this.restTemplate.exchange("/shop/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test name filter
		result = this.search("/shop?size=20&name=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ShopResource shopResource : page.getContent()) {
			assertThat(shopResource.getName()).startsWith("c");
		}
		// Test address1 filter
		// Set the value on entity and update
		shop.setAddress1("c");
		// Process update
		request = new RequestEntity<Shop>(shop, HttpMethod.PUT, null);
		this.restTemplate.exchange("/shop/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test address1 filter
		result = this.search("/shop?size=20&address1=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ShopResource shopResource : page.getContent()) {
			assertThat(shopResource.getAddress1()).startsWith("c");
		}
		// Test address2 filter
		// Set the value on entity and update
		shop.setAddress2("c");
		// Process update
		request = new RequestEntity<Shop>(shop, HttpMethod.PUT, null);
		this.restTemplate.exchange("/shop/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test address2 filter
		result = this.search("/shop?size=20&address2=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ShopResource shopResource : page.getContent()) {
			assertThat(shopResource.getAddress2()).startsWith("c");
		}
		// Test city filter
		// Set the value on entity and update
		shop.setCity("c");
		// Process update
		request = new RequestEntity<Shop>(shop, HttpMethod.PUT, null);
		this.restTemplate.exchange("/shop/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test city filter
		result = this.search("/shop?size=20&city=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ShopResource shopResource : page.getContent()) {
			assertThat(shopResource.getCity()).startsWith("c");
		}
		// Test countryCode filter
		// Set the value on entity and update
		shop.setCountryCode("c");
		// Process update
		request = new RequestEntity<Shop>(shop, HttpMethod.PUT, null);
		this.restTemplate.exchange("/shop/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test countryCode filter
		result = this.search("/shop?size=20&countryCode=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ShopResource shopResource : page.getContent()) {
			assertThat(shopResource.getCountryCode()).startsWith("c");
		}
		// Test phone filter
		// Set the value on entity and update
		shop.setPhone("c");
		// Process update
		request = new RequestEntity<Shop>(shop, HttpMethod.PUT, null);
		this.restTemplate.exchange("/shop/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test phone filter
		result = this.search("/shop?size=20&phone=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ShopResource shopResource : page.getContent()) {
			assertThat(shopResource.getPhone()).startsWith("c");
		}
		// Test email filter
		// Set the value on entity and update
		shop.setEmail("c");
		// Process update
		request = new RequestEntity<Shop>(shop, HttpMethod.PUT, null);
		this.restTemplate.exchange("/shop/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test email filter
		result = this.search("/shop?size=20&email=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ShopResource shopResource : page.getContent()) {
			assertThat(shopResource.getEmail()).startsWith("c");
		}
		// Test executive filter
		// Set the value on entity and update
		shop.setExecutive("c");
		// Process update
		request = new RequestEntity<Shop>(shop, HttpMethod.PUT, null);
		this.restTemplate.exchange("/shop/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test executive filter
		result = this.search("/shop?size=20&executive=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ShopResource shopResource : page.getContent()) {
			assertThat(shopResource.getExecutive()).startsWith("c");
		}
	}

	private Shop createMocKShop(String code, String name, String address1, String address2, Integer zipCode, String city, String countryCode, String phone, String email, String executive) {
		Shop shopMock = new Shop();
		shopMock.setCode(code);
		shopMock.setName(name);
		shopMock.setAddress1(address1);
		shopMock.setAddress2(address2);
		shopMock.setZipCode(zipCode);
		shopMock.setCity(city);
		shopMock.setCountryCode(countryCode);
		shopMock.setPhone(phone);
		shopMock.setEmail(email);
		shopMock.setExecutive(executive);
		this.restTemplate.postForLocation("/shop", shopMock);
		return shopMock;
	}

	private ResponseEntity<PagedResources<ShopResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<ShopResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<ShopResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}