/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:56 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.SynopsisResource;
import org.demo.entity.Synopsis;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class SynopsisControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	private static final String SYNOPSIS = "synopsis";

	@Test
	public void createSynopsisTest() {
		// Create an synopsis
		Synopsis synopsis = createMocKSynopsis(new Integer((int)1) , SYNOPSIS);
		// Recover this synopsis
		ResponseEntity<SynopsisResource> result = this.restTemplate.getForEntity("/synopsis/1", SynopsisResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/synopsis/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getSynopsis()).isEqualTo(SYNOPSIS);
		// Try to create the same synopsis, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/synopsis", synopsis, SynopsisResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an synopsis and assert field
		Synopsis synopsis = createMocKSynopsis(new Integer((int)1)  , SYNOPSIS);
		// Recover this synopsis
		ResponseEntity<SynopsisResource> result = this.restTemplate.getForEntity("/synopsis/1", SynopsisResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/synopsis/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getSynopsis()).isEqualTo(SYNOPSIS);

		// Change field value
		synopsis.setSynopsis("synopsis");
		// Process update
		RequestEntity<Synopsis> request = new RequestEntity<Synopsis>(synopsis, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/synopsis/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the synopsis and ensure field are correct
		result = this.restTemplate.getForEntity("/synopsis/1", SynopsisResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/synopsis/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getSynopsis()).isEqualTo("synopsis");
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Synopsis> request = new RequestEntity<Synopsis>(new Synopsis(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/synopsis/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an synopsis
		createMocKSynopsis(new Integer((int)1)  , SYNOPSIS);
		// Recover this synopsis and test if all is ok
		ResponseEntity<SynopsisResource> result = this.restTemplate.getForEntity("/synopsis/1", SynopsisResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the synopsis
		RequestEntity<Synopsis> request = new RequestEntity<Synopsis>(new Synopsis(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/synopsis/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the synopsis and ensure it's don't exist
		// Recover this synopsis and test if all is ok
		result = this.restTemplate.getForEntity("/synopsis/1", SynopsisResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the synopsis
		RequestEntity<Synopsis> request = new RequestEntity<Synopsis>(new Synopsis(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/synopsis/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getSynopsissTest() {
		// First call assert no element
		ResponseEntity<PagedResources<SynopsisResource>> result = this.search("/synopsis");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<SynopsisResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 synopsis
		for (int i = 1; i < 22; i++) {
			createMocKSynopsis(new Integer((int)i),String.valueOf(i));
		}
		result = this.search("/synopsis");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/synopsis?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getSynopsissTestFilter() {
		// Create an synopsis
		Synopsis synopsis = createMocKSynopsis(new Integer((int)1) , SYNOPSIS);
		RequestEntity<Synopsis> request = null;
		ResponseEntity<PagedResources<SynopsisResource>> result = null;
		PagedResources<SynopsisResource> page = null;
		// Test synopsis filter
		// Set the value on entity and update
		synopsis.setSynopsis("c");
		// Process update
		request = new RequestEntity<Synopsis>(synopsis, HttpMethod.PUT, null);
		this.restTemplate.exchange("/synopsis/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test synopsis filter
		result = this.search("/synopsis?size=20&synopsis=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SynopsisResource synopsisResource : page.getContent()) {
			assertThat(synopsisResource.getSynopsis()).startsWith("c");
		}
	}

	private Synopsis createMocKSynopsis(Integer bookId, String synopsis) {
		Synopsis synopsisMock = new Synopsis();
		synopsisMock.setBookId(bookId);
		synopsisMock.setSynopsis(synopsis);
		this.restTemplate.postForLocation("/synopsis", synopsisMock);
		return synopsisMock;
	}

	private ResponseEntity<PagedResources<SynopsisResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<SynopsisResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<SynopsisResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}