/*
 * Created on 2017-12-20 ( Date ISO 2017-12-20 - Time 14:58:56 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.WorkgroupResource;
import org.demo.entity.Workgroup;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import java.util.Date;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class WorkgroupControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;
	private static final String NAME = "name";
	private static final String DESCRIPTION = "description";
	private static final Date CREATIONDATE = new Date();

	@Test
	public void createWorkgroupTest() {
		// Create an workgroup
		Workgroup workgroup = createMocKWorkgroup(new Short((short)1) , NAME, DESCRIPTION, CREATIONDATE);
		// Recover this workgroup
		ResponseEntity<WorkgroupResource> result = this.restTemplate.getForEntity("/workgroup/1", WorkgroupResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/workgroup/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getName()).isEqualTo(NAME);
		assertThat(result.getBody().getDescription()).isEqualTo(DESCRIPTION);
		// Try to create the same workgroup, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/workgroup", workgroup, WorkgroupResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an workgroup and assert field
		Workgroup workgroup = createMocKWorkgroup(new Short((short)1)  , NAME, DESCRIPTION, CREATIONDATE);
		// Recover this workgroup
		ResponseEntity<WorkgroupResource> result = this.restTemplate.getForEntity("/workgroup/1", WorkgroupResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/workgroup/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getName()).isEqualTo(NAME);
		assertThat(result.getBody().getDescription()).isEqualTo(DESCRIPTION);

		// Change field value
		workgroup.setName("name");
		workgroup.setDescription("description");
		// Process update
		RequestEntity<Workgroup> request = new RequestEntity<Workgroup>(workgroup, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/workgroup/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the workgroup and ensure field are correct
		result = this.restTemplate.getForEntity("/workgroup/1", WorkgroupResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/workgroup/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getName()).isEqualTo("name");
		assertThat(result.getBody().getDescription()).isEqualTo("description");
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Workgroup> request = new RequestEntity<Workgroup>(new Workgroup(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/workgroup/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an workgroup
		createMocKWorkgroup(new Short((short)1)  , NAME, DESCRIPTION, CREATIONDATE);
		// Recover this workgroup and test if all is ok
		ResponseEntity<WorkgroupResource> result = this.restTemplate.getForEntity("/workgroup/1", WorkgroupResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the workgroup
		RequestEntity<Workgroup> request = new RequestEntity<Workgroup>(new Workgroup(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/workgroup/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the workgroup and ensure it's don't exist
		// Recover this workgroup and test if all is ok
		result = this.restTemplate.getForEntity("/workgroup/1", WorkgroupResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the workgroup
		RequestEntity<Workgroup> request = new RequestEntity<Workgroup>(new Workgroup(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/workgroup/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getWorkgroupsTest() {
		// First call assert no element
		ResponseEntity<PagedResources<WorkgroupResource>> result = this.search("/workgroup");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<WorkgroupResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 workgroup
		for (int i = 1; i < 22; i++) {
			createMocKWorkgroup(new Short((short)i),String.valueOf(i),String.valueOf(i), new Date());
		}
		result = this.search("/workgroup");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/workgroup?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getWorkgroupsTestFilter() {
		// Create an workgroup
		Workgroup workgroup = createMocKWorkgroup(new Short((short)1) , NAME, DESCRIPTION, CREATIONDATE);
		RequestEntity<Workgroup> request = null;
		ResponseEntity<PagedResources<WorkgroupResource>> result = null;
		PagedResources<WorkgroupResource> page = null;
		// Test name filter
		// Set the value on entity and update
		workgroup.setName("c");
		// Process update
		request = new RequestEntity<Workgroup>(workgroup, HttpMethod.PUT, null);
		this.restTemplate.exchange("/workgroup/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test name filter
		result = this.search("/workgroup?size=20&name=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (WorkgroupResource workgroupResource : page.getContent()) {
			assertThat(workgroupResource.getName()).startsWith("c");
		}
		// Test description filter
		// Set the value on entity and update
		workgroup.setDescription("c");
		// Process update
		request = new RequestEntity<Workgroup>(workgroup, HttpMethod.PUT, null);
		this.restTemplate.exchange("/workgroup/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test description filter
		result = this.search("/workgroup?size=20&description=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (WorkgroupResource workgroupResource : page.getContent()) {
			assertThat(workgroupResource.getDescription()).startsWith("c");
		}
	}

	private Workgroup createMocKWorkgroup(Short id, String name, String description, Date creationDate) {
		Workgroup workgroupMock = new Workgroup();
		workgroupMock.setId(id);
		workgroupMock.setName(name);
		workgroupMock.setDescription(description);
		workgroupMock.setCreationDate(creationDate);
		this.restTemplate.postForLocation("/workgroup", workgroupMock);
		return workgroupMock;
	}

	private ResponseEntity<PagedResources<WorkgroupResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<WorkgroupResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<WorkgroupResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}